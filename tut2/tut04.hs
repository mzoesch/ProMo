-- 20220717 - #06

-- app :: (a -> b) -> a -> b
-- app f x = f x
-- 
-- 
-- add1 :: Int -> Int
-- add1 x = x+1
-- app add1 1
--     => 2


-- anonymous functions
-- 
-- (\<args> -> <expr>)
-- e.g.: add1 = (\x -> x + 1)
-- 
-- map
-- map :: (a -> b) -> [a] -> [b]
-- map (\x -> x+1) [1,2,3,4,5]
--     => [2,3,4,5,6]
-- 
-- with type change
-- map (\(x,y) -> x + y) [(1,2), (2,3), (3,4)]
--     => [3,5,7]
-- 
-- filter
-- when f return True the elem will be in the new list
-- filter (a -> Bool) -> [a] -> [a]
-- filter (\x -> x > 2) [1,2,3,4,5]
--     => [3,4,5]
--
-- filter (\(x,y) -> x /= y) [(1,2), (2,2)]
--      => [(1,2)]
